---
- name: Install K3s on Master Nodes
  hosts: master
  become: true
  tasks:
    - name: Install K3s Server on Master Node
      shell: |
        curl -sfL https://get.k3s.io | sh -
      args:
        creates: /usr/local/bin/k3s

    - name: Set correct permissions for k3s.yaml
      command: sudo chmod 644 /etc/rancher/k3s/k3s.yaml

- name: Wait for K3s Server to Start on Master Node
  hosts: master
  become: true
  tasks:
    - name: Wait for K3s to start on the Master Node
      wait_for:
        host: "{{ ansible_host }}"
        port: 6443
        delay: 10
        timeout: 300

- name: Generate K3s Token and Set Master IP
  hosts: master
  become: true
  tasks:
    - name: Generate K3s token for worker nodes
      command: /usr/local/bin/k3s token create
      register: k3s_token

    - name: Set Master IP and Token
      set_fact:
        k3s_master_ip: "{{ ansible_host }}"
        k3s_token: "{{ k3s_token.stdout }}"

- name: Install K3s Agent on Worker Nodes
  hosts: worker
  become: true
  vars:
    k3s_master_ip: "{{ hostvars[groups['master'][0]].k3s_master_ip }}"  # Use the dynamically set fact for master IP
    k3s_token: "{{ hostvars[groups['master'][0]].k3s_token }}"         # Use the dynamically set fact for token
    ansible_user: "{{ hostvars[groups['master'][0]].ansible_ssh_user }}"  # Reference SSH user for master node

  tasks:
    - name: Install K3s Agent on Worker Node
      shell: |
        curl -sfL https://get.k3s.io | K3S_URL="https://{{ k3s_master_ip }}:6443" K3S_TOKEN="{{ k3s_token }}" sh -
      environment:
        K3S_TOKEN: "{{ k3s_token }}"
        K3S_URL: "https://{{ k3s_master_ip }}:6443"
      args:
        creates: /usr/local/bin/k3s

    - name: Ensure k3s-agent service is started
      service:
        name: k3s-agent
        state: started
        enabled: yes

    - name: Check if k3s.yaml exists with become
      stat:
        path: /etc/rancher/k3s/k3s.yaml
      register: k3s_yaml_status
      become: true  # Check with elevated permissions

    - name: Retrieve k3s.yaml from Master Node if missing
      when: not k3s_yaml_status.stat.exists
      block:
        - name: Copy k3s.yaml from Master Node to Localhost
          shell: |
            scp -o StrictHostKeyChecking=no {{ ansible_user }}@{{ k3s_master_ip }}:/etc/rancher/k3s/k3s.yaml /tmp/k3s.yaml
          become: true
          delegate_to: localhost  # Delegate to localhost to run the command on the machine running Ansible

        - name: Copy k3s.yaml from Localhost to Worker Node
          copy:
            src: /tmp/k3s.yaml
            dest: /etc/rancher/k3s/k3s.yaml
            mode: 0644
          become: true

    - name: Update k3s.yaml on Worker Node to point to Master Node IP
      shell: |
        sudo sed -i "s/localhost/{{ k3s_master_ip }}/g" /etc/rancher/k3s/k3s.yaml
      when: k3s_yaml_status.stat.exists

- name: Verify Worker Node Joins Cluster
  hosts: worker
  become: true
  tasks:
    - name: Check K3s node status
      command: KUBECONFIG=/etc/rancher/k3s/k3s.yaml /usr/local/bin/k3s kubectl get nodes
      register: k3s_node_status

    - name: Show Worker Node Status
      debug:
        var: k3s_node_status.stdout

- name: Verify the Cluster Status
  hosts: master
  become: true
  tasks:
    - name: Check the status of K3s cluster
      command: /usr/local/bin/k3s kubectl get nodes
      register: k3s_status

    - name: Show K3s Cluster Status
      debug:
        var: k3s_status.stdout
