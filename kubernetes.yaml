---
- name: Setup Kubernetes Cluster with Kubeadm on EC2 (Amazon Linux)
  hosts: all
  become: yes
  tasks:
    - name: Install required packages on Amazon Linux
      yum:
        name:
          - curl
          - wget
          - vim
          - jq
        state: present

    - name: Disable swap (Kubernetes requirement)
      command: swapoff -a
      ignore_errors: yes

    - name: Remove swap from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*'
        state: absent

    - name: Install Docker on Amazon Linux
      yum:
        name: docker
        state: present

    - name: Enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install dependencies for Kubernetes
      yum:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Enable Kubernetes services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - kubelet
        - docker

- name: Initialize the First Kubernetes Master Node
  hosts: master1
  become: yes
  tasks:
    - name: Initialize Kubernetes on master1 node
      shell: |
        kubeadm init --control-plane-endpoint "{{ master_loadbalancer_ip }}" --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init_output
      ignore_errors: yes

    - name: Set kubeconfig for root user on master1
      shell: |
        mkdir -p $HOME/.kube
        cp /etc/kubernetes/admin.conf $HOME/.kube/config
        chown $(id -u):$(id -g) $HOME/.kube/config
      when: kubeadm_init_output.rc == 0

    - name: Deploy Flannel CNI network
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      when: kubeadm_init_output.rc == 0

    - name: Get the kubeadm join command for other masters and workers
      shell: kubeadm token create --print-join-command
      register: join_command
      when: kubeadm_init_output.rc == 0

    - name: Save the join command
      set_fact:
        kubeadm_join_command: "{{ join_command.stdout }}"
      when: kubeadm_init_output.rc == 0

- name: Join Additional Master Nodes to the Cluster
  hosts: master2:master3
  become: yes
  vars:
    kubeadm_join_command: "{{ hostvars[groups['master1'][0]].kubeadm_join_command }}"
  tasks:
    - name: Join additional master nodes to the cluster
      shell: "{{ kubeadm_join_command }}"
      ignore_errors: yes

- name: Join Worker Nodes to the Cluster
  hosts: worker
  become: yes
  vars:
    kubeadm_join_command: "{{ hostvars[groups['master1'][0]].kubeadm_join_command }}"
  tasks:
    - name: Join worker nodes to the cluster
      shell: "{{ kubeadm_join_command }}"
      ignore_errors: yes

- name: Verify Cluster Status on Master Node
  hosts: master1
  become: yes
  tasks:
    - name: Check the status of Kubernetes nodes
      command: kubectl get nodes
      register: k8s_status

    - name: Show Kubernetes Cluster Status
      debug:
        var: k8s_status.stdout
