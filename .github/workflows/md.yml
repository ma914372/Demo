name: Terraform Deploy

on:
  push:
    branches:
      - main  # Trigger workflow on main branch push
  pull_request:
    branches:
      - main  # Trigger workflow on pull requests to main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 3: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 4: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 5: Validate Terraform Configuration
      - name: Terraform Validate
        run: terraform validate

      # Step 6: Plan Terraform Changes
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      # Step 7: Apply Terraform Changes
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 8: Capture Terraform Outputs
      - name: Capture Terraform Outputs and Set GitHub Env Variables
        run: |
          MASTER_IPS=$(terraform output -json master_node_ip | jq -r '.value[]')
          WORKER_IPS=$(terraform output -json worker_node_ips | jq -r '.value[]')
          ANSIBLE_IP=$(terraform output -json ansible_node_ip | jq -r '.value')

          echo "MASTER_IPS=$MASTER_IPS" >> $GITHUB_ENV
          echo "WORKER_IPS=$WORKER_IPS" >> $GITHUB_ENV
          echo "ANSIBLE_IP=$ANSIBLE_IP" >> $GITHUB_ENV

  ansible:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure SSH Access
      - name: Configure SSH access
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 3: Set up SSH keys on Ansible Control Node
      - name: Set up SSH keys on Ansible Control Node
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$ANSIBLE_IP <<EOF
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_ansible -N "" -q
            PUBLIC_KEY=\$(cat ~/.ssh/id_rsa_ansible.pub)

            for master in $MASTER_IPS; do
              sshpass -p "ec2-user-password" ssh-copy-id -i ~/.ssh/id_rsa_ansible.pub ec2-user@\$master
            done
            for worker in $WORKER_IPS; do
              sshpass -p "ec2-user-password" ssh-copy-id -i ~/.ssh/id_rsa_ansible.pub ec2-user@\$worker
            done
          EOF

      # Step 4: Create Ansible inventory
      - name: Create Ansible inventory
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$ANSIBLE_IP <<EOF
            echo "[master]" > ~/inventory.ini
            for master in $MASTER_IPS; do
              echo "\$master ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa_ansible" >> ~/inventory.ini
            done
            echo "[worker]" >> ~/inventory.ini
            for worker in $WORKER_IPS; do
              echo "\$worker ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa_ansible" >> ~/inventory.ini
            done
          EOF

      # Step 5: Run Ansible playbooks
      - name: Run Ansible playbooks
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$ANSIBLE_IP <<EOF
            git clone https://github.com/ma914372/Demo /tmp/repo
            cd /tmp/repo

            ansible-playbook -i ~/inventory.ini ansible/kubernetes.yaml
            ansible-playbook -i ~/inventory.ini ansible/argocd.yaml
          EOF
