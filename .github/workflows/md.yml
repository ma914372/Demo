name: Terraform and Ansible Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      # Step 3: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 4: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 5: Validate Terraform Configuration
      - name: Terraform Validate
        run: terraform validate

      # Step 6: Plan Terraform Changes
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      # Step 7: Apply Terraform Changes
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'  # Only apply on the main branch
        run: terraform apply -auto-approve tfplan

      # Step 8: Capture Terraform Outputs and write to file
      - name: Fetch Terraform Outputs and write to file
        run: |
          echo "Fetching Terraform outputs..."
          
          # Fetching the IPs directly (No JSON Parsing)
          MASTER_IPS=$(terraform output -raw master_node_ip || echo "")
          WORKER_IPS=$(terraform output -raw worker_node_ips || echo "")
          ANSIBLE_IP=$(terraform output -raw ansible_node_ip || echo "")

          # Check if any of the outputs are missing or empty
          if [ -z "$MASTER_IPS" ] || [ -z "$WORKER_IPS" ] || [ -z "$ANSIBLE_IP" ]; then
            echo "Error: One or more Terraform outputs are missing or empty."
            exit 1
          fi

          # Write the IPs to a file (this file will be used by the ansible job)
          echo "MASTER_IPS=$MASTER_IPS" > terraform_output.txt
          echo "WORKER_IPS=$WORKER_IPS" >> terraform_output.txt
          echo "ANSIBLE_IP=$ANSIBLE_IP" >> terraform_output.txt

          # Print the IPs to the log
          echo "Master IPs: $MASTER_IPS"
          echo "Worker IPs: $WORKER_IPS"
          echo "Ansible IP: $ANSIBLE_IP"

      # Upload the file as an artifact so it can be accessed in the next job
      - name: Upload Terraform Output File
        uses: actions/upload-artifact@v3
        with:
          name: terraform_output_file
          path: terraform_output.txt

  ansible:
    runs-on: ubuntu-latest
    needs: terraform  # This will ensure it waits for the terraform job

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install sshpass
      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      # Step 3: Download the Terraform output file
      - name: Download Terraform Output File
        uses: actions/download-artifact@v3
        with:
          name: terraform_output_file

      # Step 4: Read the IPs from the file
      - name: Read IPs from the file
        run: |
          # Read IPs from the file using `cat` and `cut` to extract values
          MASTER_IPS=$(cat terraform_output.txt | grep "MASTER_IPS" | cut -d'=' -f2)
          WORKER_IPS=$(cat terraform_output.txt | grep "WORKER_IPS" | cut -d'=' -f2)
          ANSIBLE_IP=$(cat terraform_output.txt | grep "ANSIBLE_IP" | cut -d'=' -f2)

          # Debugging to ensure the variables are set correctly
          echo "MASTER_IPS: $MASTER_IPS"
          echo "WORKER_IPS: $WORKER_IPS"
          echo "ANSIBLE_IP: $ANSIBLE_IP"

      # Step 5: Configure SSH Access
      - name: Configure SSH Access
        run: |
          mkdir -p ~/.ssh  # Ensure the .ssh directory exists
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 6: Set up SSH Keys on Ansible Control Node
      - name: Set up SSH Keys on Ansible Control Node
        run: |
          # Ensure the .ssh directory exists
          mkdir -p ~/.ssh
          MASTER_IPS=$(cat terraform_output.txt | grep "MASTER_IPS" | cut -d'=' -f2)
          WORKER_IPS=$(cat terraform_output.txt | grep "WORKER_IPS" | cut -d'=' -f2)
          ANSIBLE_IP=$(cat terraform_output.txt | grep "ANSIBLE_IP" | cut -d'=' -f2)
          
          # Create the SSH private key file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Generate a new key pair for SSH access
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${ANSIBLE_IP} << 'EOF'
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_ansible -N "" -q
          PUBLIC_KEY=$(cat ~/.ssh/id_rsa_ansible.pub)
          
          
          # Output the public key to a temporary file
          echo "$PUBLIC_KEY" > ~/ansible_public_key.pub
          EOF

          # Copy the public key back to the local GitHub Runner machine
          scp -i ~/.ssh/id_rsa ec2-user@${ANSIBLE_IP}:~/ansible_public_key.pub ./ansible_public_key.pub

          # Set the public key as a GitHub Actions environment variable
          echo "ANSIBLE_PUBLIC_KEY=$(cat ./ansible_public_key.pub)" >> $GITHUB_ENV

          # Append the public key to the authorized_keys file on each master and worker node
          append_key_to_remote() {
          NODE_IP=$1
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$NODE_IP << EOF
          mkdir -p ~/.ssh
          echo '${ANSIBLE_PUBLIC_KEY}' >> ~/.ssh/authorized_keys
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/authorized_keys
          EOF
          }

          # Loop through and append to master nodes
          for master in $(echo "$MASTER_IPS" | tr "," "\n"); do
          append_key_to_remote $master
          done

          # Loop through and append to worker nodes
          for worker in $(echo "$WORKER_IPS" | tr "," "\n"); do
          append_key_to_remote $worker
          done

      # Step 7: Create Ansible Inventory
      - name: Create Ansible Inventory
        run: |
          MASTER_IPS=$(cat terraform_output.txt | grep "MASTER_IPS" | cut -d'=' -f2)
          WORKER_IPS=$(cat terraform_output.txt | grep "WORKER_IPS" | cut -d'=' -f2)
          ANSIBLE_IP=$(cat terraform_output.txt | grep "ANSIBLE_IP" | cut -d'=' -f2)
          scp -i ~/.ssh/id_rsa terraform_output.txt ec2-user@${ANSIBLE_IP}:~/terraform_output.txt
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${ANSIBLE_IP} << 'EOF'
          MASTER_IPS=$(cat ~/terraform_output.txt | grep "MASTER_IPS" | cut -d'=' -f2)
          WORKER_IPS=$(cat ~/terraform_output.txt | grep "WORKER_IPS" | cut -d'=' -f2)
          echo "[master]" > ~/inventory.ini
          for master in $(echo "$MASTER_IPS" | tr "," "\n"); do
            echo "$master ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa_ansible" >> ~/inventory.ini
          done
          echo "[worker]" >> ~/inventory.ini
          for worker in $(echo "$WORKER_IPS" | tr "," "\n"); do
            echo "$worker ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa_ansible" >> ~/inventory.ini
          done
          EOF

      # Step 8: Run Ansible Playbooks
      - name: Run Ansible Playbooks
        run: |
          ANSIBLE_IP=$(cat terraform_output.txt | grep "ANSIBLE_IP" | cut -d'=' -f2)
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${ANSIBLE_IP} << 'EOF'
          mkdir -p /tmp/repo
          cd /tmp/repo
          sudo yum update -y
          sudo yum install -y python3 python3-pip
          sudo pip3 install "ansible==2.9.27"  # Replace with your desired version
          sudo yum install -y git
          /usr/bin/git clone https://github.com/ma914372/Demo.git /tmp/repo
          /usr/local/bin/ansible-playbook -i ~/inventory.ini /tmp/repo/kubernetes.yaml
          /usr/local/bin/ansible-playbook -i ~/inventory.ini /tmp/repo/argocd.yml
          EOF
