name: Terraform and Ansible Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      - name: Fetch Terraform Outputs
        id: terraform_outputs
        run: |
          echo "Fetching Terraform outputs..."
          MASTER_IPS=$(terraform output -raw master_node_ip || echo "")
          WORKER_IPS=$(terraform output -raw worker_node_ips || echo "")
          ANSIBLE_IP=$(terraform output -raw ansible_node_ip || echo "")

          echo "MASTER_IPS: $MASTER_IPS"
          echo "WORKER_IPS: $WORKER_IPS"
          echo "ANSIBLE_IP: $ANSIBLE_IP"

          if [ -z "$MASTER_IPS" ] || [ -z "$WORKER_IPS" ] || [ -z "$ANSIBLE_IP" ]; then
            echo "Error: One or more Terraform outputs are missing or empty."
            exit 1
          fi

          echo "MASTER_IPS=$MASTER_IPS" >> $GITHUB_ENV
          echo "WORKER_IPS=$WORKER_IPS" >> $GITHUB_ENV
          echo "ANSIBLE_IP=$ANSIBLE_IP" >> $GITHUB_ENV

        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  ansible:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure SSH Access
        run: |
          mkdir -p ~/.ssh  # Ensure the .ssh directory exists
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Set up SSH Keys on Ansible Control Node
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Debug: Check the IP variables before using them
          echo "ANSIBLE_IP: ${{ needs.terraform.outputs.ANSIBLE_IP }}"
          echo "MASTER_IPS: ${{ needs.terraform.outputs.MASTER_IPS }}"
          echo "WORKER_IPS: ${{ needs.terraform.outputs.WORKER_IPS }}"

          # Force SSH login with debug and no host key checking
          ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa ec2-user@${{ needs.terraform.outputs.ANSIBLE_IP }} <<EOF
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_ansible -N "" -q
          PUBLIC_KEY=\$(cat ~/.ssh/id_rsa_ansible.pub)
          
          # Copy the SSH public key to each master node
          for master in \$(echo "${{ needs.terraform.outputs.MASTER_IPS }}" | tr "," "\n"); do
            sshpass -p "ec2-user-password" ssh-copy-id -i ~/.ssh/id_rsa_ansible.pub ec2-user@\$master
          done
          
          # Copy the SSH public key to each worker node
          for worker in \$(echo "${{ needs.terraform.outputs.WORKER_IPS }}" | tr "," "\n"); do
            sshpass -p "ec2-user-password" ssh-copy-id -i ~/.ssh/id_rsa_ansible.pub ec2-user@\$worker
          done
          EOF

      - name: Create Ansible Inventory
        run: |
          ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa ec2-user@${{ needs.terraform.outputs.ANSIBLE_IP }} <<EOF
          echo "[master]" > ~/inventory.ini
          for master in $(echo ${{ needs.terraform.outputs.MASTER_IPS }} | tr "," "\n"); do
            echo "\$master ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa_ansible" >> ~/inventory.ini
          done
          echo "[worker]" >> ~/inventory.ini
          for worker in $(echo ${{ needs.terraform.outputs.WORKER_IPS }} | tr "," "\n"); do
            echo "\$worker ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa_ansible" >> ~/inventory.ini
          done
          EOF

      - name: Run Ansible Playbooks
        run: |
          ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa ec2-user@${{ needs.terraform.outputs.ANSIBLE_IP }} <<EOF
          git clone https://github.com/ma914372/Demo /tmp/repo
          cd /tmp/repo
          ansible-playbook -i ~/inventory.ini ansible/kubernetes.yaml
          ansible-playbook -i ~/inventory.ini ansible/argocd.yaml
          EOF
